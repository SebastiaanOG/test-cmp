{
	"name": "13 SourceToRaw ServiceNow Projects",
	"properties": {
		"activities": [
			{
				"name": "Copy - Source To Raw JSON",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "RestSource",
						"httpRequestTimeout": "00:01:40",
						"requestInterval": "00.00:00:00.010",
						"requestMethod": "GET",
						"paginationRules": {
							"EndCondition:$.result": "Empty",
							"QueryParameters.{offset}": "RANGE:0::500"
						}
					},
					"sink": {
						"type": "JsonSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "JsonWriteSettings",
							"filePattern": "arrayOfObjects"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "ds_source_servicenow_tableapi_rest",
						"type": "DatasetReference",
						"parameters": {
							"relative_api_path": {
								"value": "@pipeline().parameters.source_entity_name",
								"type": "Expression"
							},
							"current_date": {
								"value": "@pipeline().parameters.process_run_date",
								"type": "Expression"
							},
							"incremental": {
								"value": "@pipeline().parameters.is_incremental",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "ds_datalake_json",
						"type": "DatasetReference",
						"parameters": {
							"Filesystem": "raw",
							"FolderPath": {
								"value": "@pipeline().parameters.sink_entity_folder_path",
								"type": "Expression"
							},
							"FileName": {
								"value": "@replace(pipeline().parameters.sink_entity_file_name, '.parquet', '.json')",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Copy - Source To Raw Parquet",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Flatten data to temp views",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"additionalColumns": [
							{
								"name": "ProcessRunId",
								"value": {
									"value": "@pipeline().parameters.process_run_id",
									"type": "Expression"
								}
							}
						],
						"sqlReaderQuery": {
							"value": "@concat('select * from elt.vw_sn_', pipeline().parameters.source_entity_name)",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"enableSkipIncompatibleRow": false,
					"translator": {
						"value": "@pipeline().parameters.source_sink_mapping",
						"type": "Expression"
					}
				},
				"inputs": [
					{
						"referenceName": "ds_sql_mdb_table",
						"type": "DatasetReference",
						"parameters": {
							"dbname": {
								"value": "@pipeline().parameters.mdb_dbname",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "ds_datalake",
						"type": "DatasetReference",
						"parameters": {
							"Filesystem": "raw",
							"FolderPath": {
								"value": "@pipeline().parameters.sink_entity_folder_path",
								"type": "Expression"
							},
							"FileName": {
								"value": "@pipeline().parameters.sink_entity_file_name",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Flatten data to temp views",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Parse JSON and replace empty string with NULL",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[elt].[spSnJsonToColumns]",
					"storedProcedureParameters": {
						"entity_name": {
							"value": {
								"value": "@pipeline().parameters.source_entity_name",
								"type": "Expression"
							},
							"type": "String"
						},
						"use_case_code": {
							"value": {
								"value": "@pipeline().parameters.use_case_code",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqldb_mdb",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbname": {
							"value": "@pipeline().parameters.mdb_dbname",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Parse JSON and replace empty string with NULL",
				"type": "ExecuteDataFlow",
				"dependsOn": [
					{
						"activity": "Create and truncate temp tables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "replaceEmptyStringWithNull",
						"type": "DataFlowReference",
						"parameters": {
							"sink_entity_name": {
								"value": "'@{pipeline().parameters.source_entity_name}'",
								"type": "Expression"
							}
						},
						"datasetParameters": {
							"source": {
								"Filesystem": "raw",
								"FolderPath": {
									"value": "@pipeline().parameters.sink_entity_folder_path",
									"type": "Expression"
								},
								"FileName": {
									"value": "@replace(pipeline().parameters.sink_entity_file_name, '.parquet', '.json')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceParameters": {
							"sink": {
								"linkedService": {
									"dbname": {
										"value": "@pipeline().parameters.mdb_dbname",
										"type": "Expression"
									}
								}
							}
						}
					},
					"compute": {
						"coreCount": 8,
						"computeType": "General"
					},
					"traceLevel": "Fine"
				}
			},
			{
				"name": "Create and truncate temp tables",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy - Source To Raw JSON",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[elt].[spSnCreateTruncateTempTables]",
					"storedProcedureParameters": {
						"sink_entity_name": {
							"value": {
								"value": "@pipeline().parameters.source_entity_name",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqldb_mdb",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbname": {
							"value": "@pipeline().parameters.mdb_dbname",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Drop temp tables and views",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy - Source To Raw Parquet",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[elt].[spSnDropTempTablesAndViews]",
					"storedProcedureParameters": {
						"sink_entity_name": {
							"value": {
								"value": "@pipeline().parameters.source_entity_name",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqldb_mdb",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbname": {
							"value": "@pipeline().parameters.mdb_dbname",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"source_entity_name": {
				"type": "string"
			},
			"sink_entity_folder_path": {
				"type": "string"
			},
			"sink_entity_file_name": {
				"type": "string"
			},
			"source_sink_mapping": {
				"type": "array"
			},
			"process_run_date": {
				"type": "string"
			},
			"is_incremental": {
				"type": "string",
				"defaultValue": "false"
			},
			"mdb_dbname": {
				"type": "string"
			},
			"use_case_code": {
				"type": "string"
			},
			"process_run_id": {
				"type": "string"
			}
		},
		"folder": {
			"name": "ELT DWH/10 SourceToRaw"
		},
		"annotations": []
	}
}